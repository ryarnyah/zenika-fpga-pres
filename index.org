#    -*- mode: org -*-
#+REVEAL_ROOT: ./vendor/reveal.js
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1420 reveal_height:800
#+OPTIONS: toc:0
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_global_footer:t
#+REVEAL_MIN_SCALE: 0.7
#+REVEAL_MAX_SCALE: 3.5
#+REVEAL_HLEVEL: 1
#+REVEAL_TRANS: linear
#+REVEAL_THEME: ./css/slides.css

#+REVEAL_TITLE_SLIDE: <div class="page-title"><h1 id="title" style="width: 900px">FPGA? FPG Quoi?</h1><h2>MORVAN Pierre</h2></div>
#+REVEAL_HTML: <link href="css/slides.css" rel="stylesheet">
#+REVEAL_HTML: <title>FPGA? FPG Quoi?</title>

* WHO AM I?
  #+ATTR_HTML: :style border-radius: 50%; margin: auto; display: block;
  [[./assets/pierre_znk.png]]
  #+ATTR_HTML: :style text-align: center
  Pierre Morvan @Zenika Paris
  #+ATTR_HTML: :style text-align: center
  @ryarnyah
  #+ATTR_HTML: :style text-align: center
  "Du Java mais pas que..."
  #+ATTR_HTML: :style text-align: center
  Par contre, je ne suis pas un d√©veloppeur hardware non plus !
** JE NE VAIS PAS VOUS PARLER DE √ßa!
  #+ATTR_HTML: :class questions
  [[./assets/cold-solder-joint2.jpg]]
** NI DE √ßa!
  #+ATTR_HTML: :class questions
  [[./assets/breadboard_w_arduino_sm.jpg]]
* FPGA (Field Programmable Gate Array)?
  #+ATTR_HTML: :class questions
  [[./assets/Xilinx_XC7A35T.jpg]]
** USE-CASES (subset)
   #+ATTR_HTML: :style max-width: 20%; margin-left: auto; margin-right: auto;
   [[./assets/FPGAs-Icon_4x.png]]

   #+ATTR_REVEAL: :frag (appear)
   * Prototypage microcontr√¥leur
   * Composant √† usage sp√©cifique (co-processeur AES, compression vid√©o, faible production de composants, etc)
   * Une tr√®s grande quantit√© d'IO <=> parall√©lisation de traitements possible.
   #+ATTR_REVEAL: :frag ~none~
   * Utilisation dans des contextes sp√©cifiques d'IOT (microcontr√¥leur avec TCP int√©gr√©)
   * Cartes r√©seau TLS (Oui, √ßa existe.)
   * Processeur sp√©cifique Java (Oui, il y en a aussi.)
   * Acc√©l√©ration de certaines partie de code (ex en Java avec TornadoVM)
   * Pourquoi pas un CPU orient√© WASM? :)
   #+BEGIN_NOTES
   Dans le cas d'une production faible => Trop couteux de faire de l'ASICS.
   #+END_NOTES
** ASICS VS FPGA
   ASICS (Application Specific Integrated Circuit)
   #+ATTR_REVEAL: :frag (appear)
   * Votre CPU en est un.
   #+ATTR_REVEAL: :frag ~none~
   * Plus co√ªteux <=> n√©cessite souvent une cha√Æne de production d√©di√©e.
   * Moins co√ªteux √† l'unit√©.
   * Upgrade impossible ou doit √™tre pris en compte lors du design <=> implique une logique similaire aux FPGAs.
   * Plus performant (pas de LUTs, placement efficace, etc).
   #+BEGIN_NOTES
   Si vous regardez un peu lit√©rature vous v√©rez surement le terme ASICS...
   Un composant existant reproduit avec un FPGA sera toujours moins cher que le FPGA necessaire.
   Upgrade impossible => Dans ces cas la on trouvera souvent un co-processeur FPGA.
   #+END_NOTES
** Pour les accros du retro-gaming: MisTER
   #+ATTR_HTML: :class questions
   [[./assets/MISTER_FPGA_Logo.png]]
   * Retro-gaming reproduisants les CPUs/GPUs/FPUs
   * Utilisation d'un mat√©riel "cheap"
   * Permet de reproduire les "bugs" n√©cessaires √† certains jeux.
* ET C'EST QUOI UN SIGNAL?
   #+ATTR_HTML: :style max-width: 90%;
   [[./assets/sample_sentence-1.png]]
** ET L'HORLOGE? COMME MA MONTRE?
   [[./assets/domain.png]]
* ARCHITECTURE FPGA
  [[./assets/Figure-A-A-three-input-lookup-table-3-LUT-FPGA-A-programmable-interconnect-wires-the.png]]
  #+BEGIN_NOTES
  * Composant stateless <=> necessite une m√©moire flash et une reprogrammation √† chaque boot. => Bitstream.
  * Compos√© de LUT (Lookup Tables), MUXers, Block Ram (BRAM), liens programmables.
  * Impl√©mentation spcifique au constructeur. bitstream aussi sp√©cifique.
  * Utilisation des outils du constructeur pour le programmer (Xilinx, etc) => 130 Go necessaires!!!
  #+END_NOTES
** üîçLUT (LOOK UP TABLES)
   [[./assets/ljnz7.png]]
   * Composant permettant de reproduire le comportement de plusieurs √©l√©ments, dont des portes AND, OR, etc.
   * C≈ìur m√™me de votre FPGA.
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto;
   | A | B | \rightarrow{} | A AND B | A  OR B | A XOR B |
   |---+---+---------------+---------+---------+---------|
   | 0 | 0 |               |       0 |       0 |       0 |
   | 0 | 1 |               |       0 |       1 |       1 |
   | 1 | 0 |               |       0 |       1 |       1 |
   | 1 | 1 |               |       1 |       1 |       0 |
#+TBLFM: $3=>
#+BEGIN_NOTES
   D-type flip-flop:
   #+END_NOTES
** üîçMUX (MULTIPLEXER)
   [[./assets/multiplexer.png]]
   * Permet de selectionner des Inputs en fonction d'un signal.
** üîçD Flip-flop
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 20%;
   [[./assets/flip-flop.png]]
   * Permet de stocker des donn√©es.
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto;
   | CLK | D | \rightarrow{} | Q                 | ~Q                |
   |-----+---+---------------+-------------------+-------------------|
   |   0 | 0 |               | Pas de changement | Pas de changement |
   |   0 | 1 |               | Pas de changement | Pas de changement |
   |   1 | 0 |               | 0                 | 1                 |
   |   1 | 1 |               | 1                 | 0                 |
** COMPILATION?
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 40%;
   [[./assets/xilinx.png]]

   Essentiellement des outils propri√©taires associ√©s au constructeur :
   * Vivado (Xilinx)
   * Quartus (Intel)
   * ...
   Mais certaines alternatives open-source voient le jour :
   * Yosys Open SYnthesis Suite
   * F4PGA (qui int√®gre Yosys en mode le GCC du FPGA)
   #+BEGIN_NOTES
   On parlera plus de synth√©tisation.
   S'effectue en plusieures phases dont le placement, route, synthese, etc.
   Plusieurs 10aines de Go d'outils! Xilinx necessite ~130Go!!!
   #+END_NOTES
** ET LES TESTS?
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 25%;
   [[./assets/tester-douter.jpg]]
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_HTML: :style color: red; font-size: 2em; text-align: center;
   DOUTER SUR DU HARDWARE, C'EST JUSTE DU SUICIDE !
   #+BEGIN_NOTES
   Mais je croyais que "tester c'est douter"?
   Pas de debugger, etc
   #+END_NOTES
** ET LES TESTS?
   Plusieurs types de tests sont applicables :
   * Formel (avec par exemple symbiosys)
   #+BEGIN_SRC verilog
   `ifdef FORMAL
     initial assume (RST);
   
     reg f_past_valid;
     initial f_past_valid = 1'b0;
     always @(posedge clk) f_past_valid <= 1'b1;   
   `endif
   #+END_SRC
   * Unitaire: simulation + tests signal (avec un couple de test bench + une analyse des r√©sultats <=> par exemple avec Cocotb)
   #+BEGIN_SRC python
     @cocotb.test()
     async def check_instr_decoder_decode(dut):
         """ Test that instr is decoded successfully """
         clock = Clock(dut.clk, 10, units="us")
         cocotb.start_soon(clock.start())
     ...
   #+END_SRC
   * Mat√©riel: leds, debugger chip, etc
** ET √ßa SE SIMULE TOUT √ßa?
   Plusieurs simulateurs existent, notamment Verilator (C++) qui permet d'avoir un simulateur "rapide":
   #+BEGIN_SRC cpp
     int main(int argc, char **argv)
     {
        Verilated::commandArgs(argc, argv);
        tb = new BLINKY_TB();

        tb->reset();

        while (!tb->done())
        {
          tb->tick();
        }

        tb->close();
        exit(0);
     }
   #+END_SRC
   Mais il en existe d'autres (propri√©taires ou non):
   * iCarus verilog
   * Verilog-XL
   * ModelSIM
   * ...
* D√©MO: BLINKY
  Dans cette d√©mo nous allons voir un module blinky similaire √† celui-ci et l'uploader sur le FPGA.

  #+BEGIN_SRC verilog
     module top (
         input logic CLK,
         input logic RST,
         output logic [15:0] LEDS
     );
         logic [15:0] counter = 0;
         always @(posedge CLK) begin
             counter <= counter + 1;
             if (RST) counter <= 0;
         end
         assign LEDS = counter;
    endmodule
  #+END_SRC
  #+BEGIN_NOTES
  Pour le "compiler" nous allons utiliser la suite fournie avec F4PGA (le GCC du FPGA).
  #+END_NOTES
** D√©MO: BLINKY (Sch√©ma)
   [[./assets/blinky-schema.png]]
** D√©MO: BLINKY (Compil√©)
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 95%;
   [[./assets/syth-final-blinky.png]]
   #+BEGIN_NOTES
   FDRE: FDRE is a D-type flip-flop with an active-high clock enable
   #+END_NOTES
* DEMO
   #+ATTR_HTML: :class questions
   [[./assets/Programming-pana.svg]]
* CPU?
   #+ATTR_HTML: :style width: 40%;
  [[./assets/simple-CPU.png]]
** RISC vs CISC
   * Taille variable ou non des instructions.
   * Complexit√© des instructions.
   * Intel transforme en interne les instructions CISC en instructions RISC !
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto;
   | RISC (Reduced Instruction Set Computer) | CISC (Complex Instruction Set Computer) |
   |-----------------------------------------+-----------------------------------------|
   | PowerPC                                 | x86                                     |
   | MIPS                                    |                                         |
   | SPARC                                   |                                         |
   | ARM                                     |                                         |
* D√©MO: Un CPU RISC
   Dans cette d√©mo nous utiliserons un CPU RISC-V avec le jeu d'instruction RV32i (le plus simple) d√©velopp√© pour l'occasion :)
   * CPU 32 bits.
   * Pas de supports des nombres flottants.
   * SOC (System on chip) avec des LEDs, une m√©moire RAM de 4k, de l'UART (port s√©rie).
   * Un firmware minimal permettant d'ex√©cuter d'autres programmes.
   * Loin d'√™tre performant !
   * Il y a plus que s√ªrement des bugs !
   * Mais on va voir ensemble que √ßa marche!
   #+BEGIN_NOTES
   Utilisation d'un bus Wishbone pour l'intercommunication entre les composants.
   #+END_NOTES
** DEMO: Un CPU RISC (Sch√©ma)
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 25%; margin-top: auto; margin-bottom: auto;
   [[./assets/cpu-chip-schematic.png]]
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 95%; margin-top: auto; margin-bottom: auto;
   [[./assets/cpu-schematic.png]]
** DEMO: Un CPU RISC (Compil√©)
   #+ATTR_HTML: :style margin-left: auto; margin-right: auto; max-width: 60%; margin-top: auto; margin-bottom: auto;
   [[./assets/cpu-implem.png]]
   #+BEGIN_NOTES
   En haut a gauche: register file
   En haut √† droite: instruction decoder
   Au millieu √† gauche: ALU
   #+END_NOTES
* DEMO
   #+ATTR_HTML: :class questions
   [[./assets/Programming-pana.svg]]
* MERCI
   #+ATTR_HTML: :class questions
  [[./assets/Questions-pana.svg]]
* Pour aller plus loin!
  #+ATTR_HTML: :style margin: auto; display: block; max-width: 23%;
  [[./assets/qrcode.png]]

  * Nandland: https://nandland.com/
  * From Blinker to RISCV: https://github.com/BrunoLevy/learn-fpga/tree/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV
  * ZipCPU (blog + CPU): https://zipcpu.com/
  * The SErial RISC-V CPU: https://github.com/olofk/serv
  * Verilator: https://www.veripool.org/verilator/
  * F4PGA: https://f4pga.org/
  * RISC-V: https://riscv.org/
